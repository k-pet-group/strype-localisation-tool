{
    "en": {
        "main": {
            "localeName": "English",
            "defaultProjName": "My project",
            "strypeFileDesc": "Strype project file",
            "pythonFileDesc": "Python code file",
            "frame": {
                "defaultText": {
                    "condition": "condition ",
                    "list": "list ",
                    "identifier": "identifier ",
                    "expression": "expression ",
                    "value": "value ",
                    "variable": "variable ",
                    "funcCall": "function name",
                    "simpleFuncCall": "function()",
                    "exception": "exception ",
                    "name": "name ",
                    "parameters": "parameters ",
                    "module": "module ",
                    "modulePart": "function/class ",
                    "libraryAddress": "location",
                    "comment": "comment ",
                    "projectDescription": "project description",
                    "funcDescription": "function description"
                },
                "funcdef_desc": "function definition",
                "varassign_desc": "assignment",
                "funccall_desc": "function call",
                "blank_desc": "blank line",
                "comment_desc": "comment"
            },
            "messageBannerMessage": {
                "noUndo": "There is no undo action available.",
                "noRedo": "There is no redo action available.",
                "uploadEditorFileError": "An error occurred while loading file: {errorMsg}. Your code has not changed.",
                "uploadEditorFileNotSupported": "This file format is not supported. Expected file extension: {list}. Your code has not changed.",
                "forbiddenFramePaste": "The selected frame(s) cannot be pasted because it results in illegal code.",
                "functionFrameCantDelete": "A function definition frame cannot be deleted when content is not empty.",
                "gdriveConnectToSaveFailed": "The connection to Google Drive has been lost. The synchronisation with Google Drive is stopped, latest changes may not have been saved.",
                "gdriveCantCreateStrypeFolder": "Strype could not create a default \"Strype\" folder in Google Drive.",
                "invalidPythonParseImport": "Invalid Python code imported: {errorMsg}",
                "invalidPythonParsePaste": "Invalid Python code pasted: {errorMsg}",
                "wrongPythonStructCopied": "cannot paste else/elif/except/finally and further content in one paste",
                "incompatiblePythonStrypeSection": "the Python code cannot be placed in the target Strype section"
            },
            "buttonLabel": {
                "undo": "Undo",
                "yes": "Yes",
                "no": "No",
                "ok": "OK",
                "cancel": "Cancel",
                "saveDiffLocation": "Save elsewhere",
                "overwriteProject": "Replace",
                "saveProjectCopy": "Choose new name",
                "spaceBar": "space",
                "yesSign": "Connect",
                "noContinueWithout": "Do not connect",
                "saveChanges": "Save changes",
                "discardChanges": "Discard changes",
                "copyLink": "Copy link",
                "continue": "Continue",
                "cancelLoadSharedProject": "Cancel (load backup)"
            },
            "errorMessage": {
                "wrongDataFormat": "the data format cannot be read",
                "stateDataIntegrity": "the data seems to be corrupted",
                "dataNotObject": "the data doesn't describe an object",
                "stateWrongPlatform": "the file was created by an incompatible version of Strype",
                "stateWrongFrameTypeName": "error reading frames types",
                "emptyEditableSlot": "Slot cannot be empty",
                "errorTitle": "Error",
                "pastFrameErrTitle": "Runtime error at last run",
                "errorUserDefinedFuncMsg": "User-defined function\nthis function definition contains errors",
                "errorUserDefinedVarMsg": "User-defined variable\none of the assignments for this variable contains errors",
                "EOFError": "This frame cannot be empty.",
                "GAPIFailed": "Google API failed to load.",
                "GDriveSaveFailed": "Could not save to Google Drive.",
                "fileNameError": "Project / File name can only contain letters, numbers, spaces, hyphens or parentheses",
                "shareProjectFailed": "Your project's sharing link could not be generated.<br>(Error: {error})",
                "sharingLinkTimedout": "Preparing the sharing link took too long.",
                "retrievedSharedGenericProject": "The shared project could not be opened.<br>Error: {error}",
                "gdriveConnectionSaveToLoadProjFailed": "Could not connect to Google Drive when trying to save the current project. Try to sign-in again to open another project.",
                "gdriveConnectionSaveToUnloadPageFailed": "Could not connect to Google Drive when trying to save the current project. Try to sign-in again to save the current project before leaving Strype.",
                "gdrivePermissionsNotMet": "Strype requires at least one access permission to use Google Drive.",
                "gdriveReadOnly": "This Google Drive project is read-only.",
                "gdriveWrongFile": "Please select a file supported by Strype (extension \".spy\" or \".py\").",
                "gdriveNoFile": "The project does not exist in Google Drive.",
                "gdriveError": "An error occured when attempting to load your Google Drive project (error: {error}).",
                "gdPublicShareFailed": "The project could not be shared publicly.<br>(Error: {error})",
                "unexpectedCharsPython": "unexpected character(s)",
                "fileIO": {
                    "openReadingError": "Strype ran into an internal error when opening the file (reading content issue).",
                    "notConnectedToCloud": "access to files for IO operations is only possible from a Strype project saved in the Cloud.",
                    "parentDirRefNotSupported": "parent directory references in paths (\"..\") are not supported by Strype.",
                    "fileLocationNotFound": "the location of the file \"{filename}\" could not be found.",
                    "unsupportedFile": "Strype forbids reading operations to this file \"{filename}\", because of its type.",
                    "fileNotWritableErr": "file not open for writing.",
                    "fileWriteNotBytesErr": "a bytes-like array object is required, not '{type}'",
                    "fileWriteNotStrErr": "write() argument must be str, not {type}",
                    "fileWriteLinesNotArrayErr": "writelines() argument must be a list",
                    "fileNotReadableErr": "file not open for reading.",
                    "fileClosedErr": "I/O operation on closed file.",
                    "fileModeErr": "invalid file opening mode: {mode}.",
                    "fileNotFound": "the file \"{filename}\" could not be found.",
                    "fileFetchError": "the file \"{filename}\" could not be retrieved. (error: {error})",
                    "accessToGDError": "the file \"{filename}\" could not be accessed on Google Drive. (error: {error})",
                    "readonlyFile": "the file \"{filename}\" is read-only.",
                    "writingFileFailed": "the file \"{filename}\" could not be written. (error: {error})",
                    "fileAlreadyExists": "the file \"{filename}\" already exists (a file opened with the 'exclusive creation' mode cannot exist).",
                    "closeInternalError": "Strype ran into an internal error when closing the file (file could not be found)."
                }
            },
            "appMessage": {
                "editorFileUpload": "Uploading your file to the editor...",
                "editorAskSaveChangedCode": "Your project contains unsaved changes.\nSave before closing?",
                "editorFileUploadWrongVersion": "This code has been produced with a different version of the editor.\nImporting may result in errors.\n\nDo you still want to continue?",
                "importsContainer": "Imports:",
                "funcDefsContainer": "Function definitions:",
                "mainContainer": "My code:",
                "preCompiledErrorNeedFix": "Please fix existing errors first.",
                "noWebUSB": "This browser does not support webUSB connections. Please use a browser such as Google Chrome.",
                "emptyCodeError": "The code cannot be empty.",
                "loadToTarget": "Open from:",
                "saveToTarget": "Save to:",
                "targetFS": "This device",
                "fileName": "File Name:",
                "createShareProjectLink": "Create Strype project sharing link",
                "shareProjectModeLabel": "Who can access this project:",
                "shareProjectPublicMode": "Anyone",
                "shareProjectPublicModeDetails": "Anyone with the link",
                "shareProjectWithinGDMode": "Managed by Google Drive",
                "shareProjectWithinGDModeDetails": "Only people with permission in Google Drive",
                "retrievedSharedGenericProject": "A copy of the project \"{param1}\" has been opened.",
                "gdriveFileAlreadyExists": "A project with the same name already exists in the Drive location.\nWould you like to replace it?",
                "gdriveLockedFileAlreadyExists": "This project is locked in the Drive location.\nIt cannot be saved with this name.",
                "savedGDrive": "Saved",
                "modifGDrive": "Modified",
                "lastSavedOn": "Last saved: {lastSavedDate}",
                "lastSavedOnNDays": "Last saved: {nbLastSave} days ago",
                "lastSavedOn1Day": "Last saved: yesterday",
                "lastSavedOnNHours": "Last saved: {nbLastSave} hours ago",
                "lastSavedOn1Hour": "Last saved: an hour ago",
                "lastSavedOnNMins": "Last saved: {nbLastSave} minutes ago",
                "lastSavedOn1Min": "Last saved: a minute ago",
                "lastSavedOnNSecs": "Last saved: {nbLastSave} seconds ago",
                "lastSavedOn1Sec": "Last saved: a second ago",
                "lastSavedDateUnknown": "Unknown last saved date",
                "selectFolder": "Select a folder",
                "selectStrypeFile": "Select a Strype project",
                "gdriveLocation": "Folder:",
                "gdriveAllStrypeFiles": "All Strype files",
                "gdriveAllPythonFiles": "All Python files",
                "gdriveTab": "My Drive",
                "editorErrors": "Errors",
                "resyncToGDAtStartup": "<b>Reconnect and <u>save</u> to Google Drive?</b>\n\nLast time you were editing, you were saving to Google Drive.\nIf you want to instead <u>load</u> changes from Google Drive, click 'Do not connect' and use 'Open' from the menu.",
                "LSOnShareProjectLoad": "An existing project backup has been detected.<br>Loading the shared project will erase this backup."
            },
            "contextMenu": {
                "ctrl": "Ctrl",
                "cut": "Cut",
                "copy": "Copy",
                "downloadAsImg": "Download as image",
                "duplicate": "Duplicate",
                "paste": "Paste",
                "pasteAbove": "Paste above",
                "pasteBelow": "Paste below",
                "pasteBelowJointRoot": "Paste under root",
                "enable": "Enable",
                "disable": "Disable",
                "undo": "Undo",
                "redo": "Redo",
                "delete": "Delete",
                "deleteOuter": "Delete Outer",
                "insert": "Insert",
                "screenshotGraphics": "Download screenshot"
            },
            "appMenu": {
                "downloadHex": "Convert to Hex file",
                "downloadPython": "Convert to Python file",
                "loadProject": "Open...",
                "loadDemoProject": "Examples...",
                "saveProject": "Save",
                "saveAsProject": "Save as...",
                "resetProject": "New project",
                "resetProjectTooltip": "Reset the editor with Strype default project",
                "shareProject": "Share...",
                "needSaveShareProj": "Save your project in Google Drive before sharing it",
                "lang": "Language: ",
                "homepage": "Strype Homepage",
                "apiDocumentation": "Library Documentation...",
                "version": "Version",
                "policy": "Privacy policy"
            },
            "autoCompletion": {
                "myFunctions": "My functions",
                "myVariables": "My variables",
                "importedModules": "Imported modules",
                "invalidState": "No completion available",
                "noDocumentation": "No documentation available"
            },
            "commandTabs": {
                "0": "Add Frame"
            },
            "PEA": {
                "run": "Run",
                "stop": "Stop",
                "stopping": "Stopping...",
                "runtimeErrorConsole": "Runtime error",
                "console": "Console",
                "Graphics": "Graphics",
                "importTurtle": "Import the module 'turtle' to use Turtle Graphics.",
                "PEA-layout-tabs-collapsed": "Collapsed and tabs layout",
                "PEA-layout-tabs-expanded": "Expanded and tabs layout",
                "PEA-layout-split-collapsed": "Collapsed and split layout",
                "PEA-layout-split-expanded": "Expanded and split layout"
            },
            "media": {
                "edit": "Edit",
                "imageChangedSize": "Changed size (approx): ",
                "imageCrop": "Image Crop",
                "imageDetails": "Image Details",
                "imageOriginalSize": "Original size: ",
                "imageScale": "Image Scale",
                "pixels": "pixels",
                "preview": "Preview",
                "soundAverageVolume": "Average volume:",
                "soundChangedLength": "Result length:",
                "soundCrop": "Sound Trimming",
                "soundDetails": "Sound Details",
                "soundNormaliseVolume": "Normalise volume",
                "soundPlay": "Play",
                "soundSeconds": "seconds",
                "soundStop": "Stop",
                "volumeScale": "Volume Scaling",
                "cursorPosWin": "Position (Ctrl-C to copy):",
                "cursorPosMac": "Position (⌘ C to copy):",
                "cursorColorWin": "Color (Ctrl-Shift-C to copy):",
                "cursorColorMac": "Color (⇧ ⌘ C to copy):",
                "cursorTimeWin": "Time (Ctrl-C to copy):",
                "cursorTimeMac": "Time (⌘ C to copy):",
                "cursorHeightWin": "Height (Ctrl-Shift-C to copy):",
                "cursorHeightMac": "Height (⇧ ⌘ C to copy):"
            },
            "demos": {
                "dialogTitle": "Choose an example to load",
                "addLibrary": "Add library:",
                "libraryAddrPlaceholder": "Library address",
                "add": "Add",
                "builtinGraphics": "Graphics",
                "builtinConsole": "Console",
                "builtinTurtle": "Turtle",
                "builtinMicrobit": "micro:bit"
            },
            "shortcut": {
                "delete": "Delete",
                "ctrlPlus": "Ctrl+"
            }
        },
        "mb": {
            "appMessage": {
                "startMBSimulatorNeedUserAction": "Start the micro:bit simulator using the \"play\" button on the simulator."
            },
            "buttonLabel": {
                "runOnMicrobit": "Run on micro:bit",
                "stopMBSimulator": "Stop the simulator",
                "sendToMicrobit": "Send to micro:bit",
                "addCodeExtract": "&larr; Add to code",
                "showMore": "show more",
                "showLess": "show less"
            },
            "messageBannerMessage": {
                "uploadSuccessMicrobit": "Upload to micro:bit completed.",
                "uploadFailureMicrobit": "Upload to micro:bit failed with error \"{errorMsg}\""
            },
            "commandTabs": {
                "1": "Explore micro:bit"
            },
            "action": {
                "uploadingToMicrobit": "Uploading to micro:bit ..."
            },
            "apidiscovery": {
                "v2InfoMsg": "Only works with a micro:bit board v2.",
                "microbitAPI": {
                    "led_label": "LED display",
                    "led_doc": "The 5x5 LED display of the micro:bit.",
                    "ledScroll_label": "Scroll text on the display",
                    "ledScroll_doc": "Scrolls text <b>value</b> horizontally on the display.",
                    "ledScroll_extradoc": "If <b>value</b> is an integer or float it is first converted to a string using <i>str()</i>.<br/>The <b>delay</b> parameter controls how fast the text is scrolling (150 by default).<br/>If <b>wait</b> is <i>True</i> (default value), this function will block until the animation is finished, otherwise the animation will happen in the background.<br/>If <b>loop</b> is <i>True</i> (<i>False</i> by default), the animation will repeat forever.<br/>If <b>monospace</b> is <i>True</i> (<i>False</i> by default), the characters will all take up 5 pixel-columns in width, otherwise there will be exactly 1 blank pixel-column between each character as they scroll.<br/>Note that the <b>wait</b>, <b>loop</b> and <b>monospace</b> arguments must be specified using their keyword.",
                    "ledShowIm_label": "Display an image",
                    "ledShowIm_doc": "Displays the image passed as parameter.",
                    "ledShowImTxt_label": "Display a text or an image",
                    "ledShowImTxt_doc": "If <b>value</b> is a string, float or integer, displays letters/digits in sequence. Otherwise, if <b>value</b> is an iterable sequence of images, displays these images in sequence.",
                    "ledShowImTxt_extradoc": "Each letter, digit or image is shown with <b>delay</b> milliseconds between them (400 by default).<br/>If <b>wait</b> is <i>True</i> (default value), this function will block until the animation is finished, otherwise the animation will happen in the background.<br/>If <b>loop</b> is <i>True</i> (<i>False</i> by default), the animation will repeat forever.<br/>If <b>clear</b> is <i>True</i> (<i>False</i> by default), the display will be cleared after the iterable has finished.<br/>Note that the <b>wait</b>, <b>loop</b> and <b>clear</b> arguments must be specified using their keyword.",
                    "ledGetPix_label": "Get a LED brightness",
                    "ledGetPix_doc": "Returns the brightness of the LED at column <b>x</b> and row <b>y</b> as an integer between 0 (off) and 9 (bright).",
                    "ledSetPix_label": "Set a LED brightness",
                    "ledSetPix_doc": "Sets the brightness of the LED at column <b>x</b> and row <b>y</b> to <b>value</b>, which has to be an integer between 0 and 9.",
                    "ledClear_label": "Clear all LEDs off",
                    "ledClear_doc": "Sets the brightness of all LEDs to 0 (off).",
                    "ledOn_label": "Turn the display on",
                    "ledOff_label": "Turn the display off",
                    "ledOff_extradoc": "Use <i>off()</i> to turn off the display; allowing you to re-use the GPIO pins associated with the display for other purposes.",
                    "ledIsOn_label": "Check if the display is turned on",
                    "ledIsOn_doc": "Returns <i>True</i> if the display is on, otherwise returns <i>False</i>.",
                    "ledReadLight_label": "Get the light level on the display",
                    "ledReadLight_doc": "Returns the amount of light falling on the display as an integer between 0 and 255 representing the light level, with larger meaning more light.",
                    "Img_label": "Image",
                    "Img_doc": "Image on the display.",
                    "ImgNew_label": "Create new image",
                    "ImgNew_doc": "Creates custom images",
                    "ImgEx_label": "Manipulate image",
                    "ImgEx_doc": "Functions to manipulate an image.",
                    "ImgStr_label": "Create an image (from a text value)",
                    "ImgStr_doc": "The text <b>value</b> has to consist of digits 0-9 arranged into lines, describing the image, for example:<br/><i>image = Image(\"90009:09090:00900:09090:90009\")</i><br/>will create a 5×5 image of an X. The end of a line is indicated by a colon. It’s also possible to use a newline (\\n) to indicate the end of a line like this:<br/><i>image = Image(\"90009\\n09090\\n00900\\n09090\\n90009\")</i>",
                    "ImgParam_label": "Create an image (from parameter values)",
                    "ImgParam_doc": "This other form creates an empty image with <b>width</b> columns and <b>height</b> rows. Optionally <b>buffer</b> can be an array of <b>width</b> x <b>height</b> integers in range 0-9 to initialize the image:<br/><i>Image(2, 2, b'\\x08\\x08\\x08\\x08')</i><br/>or:<br/><i>Image(2, 2, bytearray([9,9,9,9]))</i><br/>Will create a 2 x 2 pixel image at full brightness.",
                    "ImgBuiltin_label": "Built-in images library",
                    "ImgBuiltin_doc": "All the built-in images provided by micro:bit",
                    "Img01_label": "Heart",
                    "Img02_label": "Small heart",
                    "Img03_label": "Happy face",
                    "Img04_label": "Smiley face",
                    "Img05_label": "Sad face",
                    "Img06_label": "Confused face",
                    "Img07_label": "Angry face",
                    "Img08_label": "Sleepy face",
                    "Img09_label": "Suprised face",
                    "Img10_label": "Silly face",
                    "Img11_label": "Fabulous face",
                    "Img12_label": "Meh face",
                    "Img13_label": "Yes tick",
                    "Img14_label": "No cross",
                    "Img15_label": "12 o'clock",
                    "Img16_label": "11 o'clock",
                    "Img17_label": "10 o'clock",
                    "Img18_label": "9 o'clock",
                    "Img19_label": "8 o'clock",
                    "Img20_label": "7 o'clock",
                    "Img21_label": "6 o'clock",
                    "Img22_label": "5 o'clock",
                    "Img23_label": "4 o'clock",
                    "Img24_label": "3 o'clock",
                    "Img25_label": "2 o'clock",
                    "Img26_label": "1 o'clock",
                    "Img27_label": "North arrow",
                    "Img28_label": "North East arrow",
                    "Img29_label": "East arrow",
                    "Img30_label": "South East arrow",
                    "Img31_label": "South arrow",
                    "Img32_label": "South West arrow",
                    "Img33_label": "West arrow",
                    "Img34_label": "North West arrow",
                    "Img35_label": "Triangle",
                    "Img36_label": "Left triangle",
                    "Img37_label": "Chessboard",
                    "Img38_label": "Diamond",
                    "Img39_label": "Small diamond",
                    "Img40_label": "Square",
                    "Img41_label": "Small square",
                    "Img42_label": "Rabbit",
                    "Img43_label": "Cow",
                    "Img44_label": "Music crotchet",
                    "Img45_label": "Music quaver",
                    "Img46_label": "Music quavers",
                    "Img47_label": "Fork",
                    "Img48_label": "Xmas",
                    "Img49_label": "PacMan",
                    "Img50_label": "Target",
                    "Img51_label": "T-shirt",
                    "Img52_label": "Rollerskate",
                    "Img53_label": "Duck",
                    "Img54_label": "House",
                    "Img55_label": "Tortoise",
                    "Img56_label": "Butterfly",
                    "Img57_label": "Stick man",
                    "Img58_label": "Ghost",
                    "Img59_label": "Sword",
                    "Img60_label": "Giraffe",
                    "Img61_label": "Skull",
                    "Img62_label": "Umbrella",
                    "Img63_label": "Snake",
                    "ImgClocks_label": "All clock images",
                    "ImgArrows_label": "All arrow images",
                    "ImgClocks_doc": "A collection of images containing all the clock images.",
                    "ImgArrows_doc": "A collection of images containing all the arrow images.",
                    "ImgW_label": "Get image width",
                    "ImgW_doc": "Returns the number of columns in the image.",
                    "ImgH_label": "Get image height",
                    "ImgH_doc": "Returns the numbers of rows in the image",
                    "ImgSetPix_label": "Set the brightness value of a pixel in the image",
                    "ImgSetPix_doc": "Sets the brightness of the pixel at column <b>x</b> and row <b>y</b> to the <b>value</b>, which has to be between 0 (dark) and 9 (bright). This method will raise an exception when called on any of the built-in read-only images, like <i>Image.HEART</i>.",
                    "ImgGetPix_label": "Get the brightness value of a pixel in the image",
                    "ImgGetPix_doc": "Returns the brightness of pixel at column <b>x</b> and row <b>y</b> as an integer between 0 and 9.",
                    "ImgCpy_label": "Copy the image",
                    "ImgCpy_doc": "Returns an exact copy of the image.",
                    "imgInv_label": "Invert the image's brightness",
                    "imgInv_doc": "Returns a new image by inverting the brightness of the pixels in the source image.",
                    "ImgLeft_label": "Shift image to the left",
                    "ImgLeft_doc": "Returns a new image created by shifting the picture left by <b>n</b> columns.",
                    "ImgRight_label": "Shift image to the right",
                    "ImgRight_doc": "Returns a new image created by shifting the picture right by <b>n</b> columns",
                    "ImgUp_label": "Shift image upwards",
                    "ImgUp_doc": "Returns a new image created by shifting the picture up by <b>n</b> rows.",
                    "imgDown_label": "Shift image downwards",
                    "imgDown_doc": "Returns a new image created by shifting the picture down by <b>n</b> rows.",
                    "ImgCrop_label": "Crop image",
                    "ImgCrop_doc": "Returns a new image by cropping the picture to a width of <b>w</b> and a height of <b>h</b>, starting with the pixel at column <b>x</b> and row <b>y</b>.",
                    "ImgFill_label": "Fill image",
                    "ImgFill_doc": "Sets the brightness of all the pixels in the image to the value, which has to be between 0 (dark) and 9 (bright). This method will raise an exception when called on any of the built-in read-only images, like <i>Image.HEART.</i>",
                    "button_label": "Button",
                    "button_doc": "There are two buttons on the board, called <i>button_a</i> (left button) and <i>button_b</i> (right button). The example here are for <i>button_a</i>, but they are valid for <i>button_b</i> as well. You may replace <i>button_a</i> by <i>button_b</i> in your code.",
                    "buttonIsPress_label": "Know if a button is pressed",
                    "buttonIsPress_doc": "Returns <i>True</i> if the specified button is currently being held down, and <i>False</i> otherwise.",
                    "buttonWasPress_label": "Know if a button was pressed",
                    "buttonWasPress_doc": "Returns <i>True</i> or <i>False</i> to indicate if the button was pressed (went from up to down) since the device started or the last time this method was called. Calling this method will clear the press state so that the button must be pressed again before this method will return <i>True</i> again.",
                    "buttonGetPress_label": "Get the number of button presses",
                    "buttonGetPress_doc": "Returns the running total of button presses, and resets this total to zero before returning.",
                    "sounds_label": "Sounds",
                    "sounds_doc": "All the built-in sounds provided by micro:bit. (Note: sounds are part of the Sound module)",
                    "sound01_label": "Giggle",
                    "sound02_label": "Happy",
                    "sound03_label": "Hello",
                    "sound04_label": "Mysterious",
                    "sound05_label": "Sad",
                    "sound06_label": "Slide",
                    "sound07_label": "Soaring",
                    "sound08_label": "Spring",
                    "sound09_label": "Twinkle",
                    "sound10_label": "Yawn",
                    "audio_label": "Audio (module)",
                    "audio_doc": "This module allows you play sounds from a speaker attached to micro:bit. In order to use the audio module you will need to provide a sound source.",
                    "audio_extradoc": "A sound source is an iterable (sequence, like list or tuple, or a generator) of frames, each of 32 samples. The audio modules plays samples at the rate of 7812.5 samples per second, which means that it can reproduce frequencies up to 3.9kHz.",
                    "audioPlay_label": "Play some audio",
                    "audioPlay_doc": "Plays the source to completion.<br/><b>source</b> is an iterable, each element of which must be an <b>AudioFrame</b>.",
                    "audioPlay_extradoc": "If <b>wait</b> is <i>True</i> (default value), this function will block until the source is exhausted.<br/><b>pin</b> specifies which pin the speaker is connected to (<i>pin0</i> by default).<br/><b>return_pin</b> specifies a differential pin to connect to the speaker instead of ground (<i>None</i> by default) - ignored for v2.",
                    "audioFrame_label": "Get the audio frame object containing the audio samples",
                    "audioFrame_doc": "An AudioFrame object is a list of 32 samples each of which is a signed byte (whole number between -128 and 127).<br/>It takes just over 4 ms to play a single frame.",
                    "mic_label": "Microphone",
                    "mic_doc": "This object lets you access the built-in microphone available on the micro:bit V2. It can be used to respond to sound. The microphone input is located on the front of the board alongside a microphone activity LED, which is lit when the microphone is in use.",
                    "currSoundEvent_label": "Get the current Sound event",
                    "currSoundEvent_doc": "Returns the name of the last recorded sound event, <i>SoundEvent('loud')</i> or <i>SoundEvent('quiet')</i>.",
                    "wasSoundEvent_label": "Check if a Sound event happened once",
                    "wasSoundEvent_doc": "Checks if the Sound <b>event</b>, such as <i>SoundEvent.LOUD</i> or <i>SoundEvent.QUIET</i>, was heard at least once since the last call. It returns <i>True</i> if so, <i>False</i> if not, and clears the sound event history.",
                    "isSoundEvent_label": "Check if a Sound event happened last",
                    "isSoundEvent_doc": "Checks if the Sound <b>event</b>, such as <i>SoundEvent.LOUD</i> or <i>SoundEvent.QUIET</i>, is the most recent since the last call. It returns <i>True</i> if so, <i>False</i> if not. It does not clear the sound event history.",
                    "soundEvents_label": "Get Sound events",
                    "soundEvents_doc": "Returns a tuple of the event history. The most recent is listed last. It also clears the sound event history before returning.",
                    "soundEvThres_label": "Set a Sound event threshold",
                    "soundEvThres_doc": "Associate the threshold level <b>value</b> in the range 0-255 to a given Sound <b>event</b>. For example, <i>set_threshold(SoundEvent.LOUD, 250)</i> will only trigger if the sound is very loud (>= 250).",
                    "soundLevel_label": "Get the sound level",
                    "soundLevel_doc": "Returns a representation of the sound pressure level in the range 0 to 255.",
                    "acc_label": "Accelerometer",
                    "acc_doc": "This object gives you access to the on-board accelerometer.",
                    "acc_extradoc": "The accelerometer also provides convenience functions for detecting gestures. The recognised gestures are: <i>up</i>, <i>down</i>, <i>left</i>, <i>right</i>, <i>face up</i>, <i>face down</i>, <i>freefall</i>, <i>3g</i>, <i>6g</i>, <i>8g</i>, <i>shake</i>.<br/>By default MicroPython sets the accelerometer range to +/- 2g, changing the accelerometer range is currently not possible in MicroPython. The accelerometer returns a value in the range 0..1024 for each axis, which is then scaled accordingly.",
                    "accGest_label": "Get the current gesture",
                    "accGest_doc": "Returns the name of the current gesture (one these values: <i>up</i>, <i>down</i>, <i>left</i>, <i>right</i>, <i>face up</i>, <i>face down</i>, <i>freefall</i>, <i>3g</i>, <i>6g</i>, <i>8g</i>, <i>shake</i>).",
                    "accXYZ_label": "Get the acceleration measurements",
                    "accXYZ_doc": "Gets the acceleration measurements in all axes at once, as a three-element tuple of integers ordered as X, Y, Z. By default the accelerometer is configured with a range of +/- 2g, and so X, Y, and Z will be within the range of +/-2000mg.",
                    "accX_label": "Get X axis acceleration value",
                    "accX_doc": "Gets the acceleration measurement in the X axis, as a positive or negative integer, depending on the direction. The measurement is given in milli-g. By default the accelerometer is configured with a range of +/- 2g, and so this method will return within the range of +/- 2000mg.",
                    "accY_label": "Get Y axis acceleration value",
                    "accY_doc": "Get the acceleration measurement in the Y axis, as a positive or negative integer, depending on the direction. The measurement is given in milli-g. By default the accelerometer is configured with a range of +/- 2g, and so this method will return within the range of +/- 2000mg.",
                    "accZ_label": "Get Z axis acceleration value",
                    "accZ_doc": "Gets the acceleration measurement in the Z axis, as a positive or negative integer, depending on the direction. The measurement is given in milli-g. By default the accelerometer is configured with a range of +/- 2g, and so this method will return within the range of +/- 2000mg.",
                    "comp_label": "Compass",
                    "comp_doc": "This module lets you access the built-in electronic compass. Before using, the compass should be calibrated, otherwise the readings may be wrong.",
                    "compHead_label": "Get heading",
                    "compHead_doc": "Gives the compass heading, calculated from the above readings, as an integer in the range from 0 to 360, representing the angle in degrees, clockwise, with north as 0.",
                    "compIsCalib_label": "Know if the compass is calibrated",
                    "compIsCalib_doc": "Returns <i>True</i> if the compass has been successfully calibrated, and returns <i>False</i> otherwise.",
                    "compCalib_label": "Calibrate the compass",
                    "compCalib_doc": "Starts the calibration process. An instructive message will be scrolled to the user after which they will need to rotate the device in order to draw a circle on the LED display.",
                    "compClear_label": "Clear the current compass calibration",
                    "compClear_doc": "Undoes the calibration, making the compass uncalibrated again.",
                    "compGetX_label": "Get X axis magnetic field value",
                    "compGetX_doc": "Gives the reading of the magnetic field strength on the X axis in nano tesla, as a positive or negative integer, depending on the direction of the field.",
                    "compGetY_label": "Get Y axis magnetic field value",
                    "compGetY_doc": "Gives the reading of the magnetic field strength on the Y axis in nano tesla, as a positive or negative integer, depending on the direction of the field.",
                    "compGetZ_label": "Get Z axis magnetic field value",
                    "compGetZ_doc": "Gives the reading of the magnetic field strength on the Z axis in nano tesla, as a positive or negative integer, depending on the direction of the field.",
                    "compGetField_label": "Get magnetic field strength value",
                    "compGetField_doc": "Returns an integer indication of the magnitude of the magnetic field around the device in nano tesla.",
                    "music_label": "Music (module)",
                    "music_doc": "You can use the music module to play simple tunes, provided that you connect a speaker to your board (for micro:bit v1).",
                    "musicBuiltin_label": "Built-in melodies library",
                    "musicBuiltin_doc": "All the built-in melodies provided by micro:bit",
                    "music1_label": "Da-da-da-dum",
                    "music1_doc": "The opening to Beethoven’s 5th Symphony in C minor.",
                    "music2_label": "The Entertainer",
                    "music2_doc": "The opening fragment of Scott Joplin’s Ragtime classic \"The Entertainer\".",
                    "music3_label": "Prelude",
                    "music3_doc": "The opening of the first Prelude in C Major of J.S.Bach’s 48 Preludes and Fugues.",
                    "music4_label": "Ode to Joy",
                    "music4_doc": "The \"Ode to Joy\" theme from Beethoven’s 9th Symphony in D minor.",
                    "music5_label": "Nyan cat",
                    "music5_doc": "The Nyan Cat theme (<a href=\"http://www.nyan.cat/\" target=\"_blank\">http://www.nyan.cat/</a>). The composer is unknown. This is fair use for educational porpoises (as they say in New York).",
                    "music6_label": "Phone ring tone",
                    "music6_doc": "Something that sounds like a mobile phone ringtone. To be used to indicate an incoming message.",
                    "music7_label": "Funk",
                    "music7_doc": "A funky bass line for secret agents and criminal masterminds.",
                    "music8_label": "Blues",
                    "music8_doc": "A boogie-woogie 12-bar blues walking bass.",
                    "music9_label": "Happy birthday",
                    "music9_doc": "\"Happy Birthday to You…\" for copyright status see: <a href=\"http://www.bbc.co.uk/news/world-us-canada-34332853\" target=\"_blank\">http://www.bbc.co.uk/news/world-us-canada-34332853</a>.",
                    "music10_label": "Wedding",
                    "music10_doc": "The bridal chorus from Wagner’s opera \"Lohengrin\".",
                    "music11_label": "Funeral march",
                    "music11_doc": "The “funeral march” otherwise known as Frédéric Chopin’s Piano Sonata No. 2 in B♭ minor, Op. 35.",
                    "music12_label": "Punch line",
                    "music12_doc": "A fun fragment that signifies a joke has been made.",
                    "music13_label": "Python",
                    "music13_doc": "John Philip Sousa’s march \"Liberty Bell\" aka, the theme for \"Monty Python’s Flying Circus\" (after which the Python programming language is named).",
                    "music14_label": "Baddy",
                    "music14_doc": "Silent movie era entrance of a baddy.",
                    "music15_label": "Chase",
                    "music15_doc": "Silent movie era chase scene.",
                    "music16_label": "Ba-ding",
                    "music16_doc": "A short signal to indicate something has happened.",
                    "music17_label": "Wa-wa-wa-waa",
                    "music17_doc": "A very sad trombone.",
                    "music18_label": "Jump up",
                    "music18_doc": "For use in a game, indicating upward movement.",
                    "music19_label": "Jump down",
                    "music19_doc": "For use in a game, indicating downward movement.",
                    "music20_label": "Power up",
                    "music20_doc": "A fanfare to indicate an achievement unlocked.",
                    "music21_label": "Power down",
                    "music21_doc": "A sad fanfare to indicate an achievement lost.",
                    "musicPlay_label": "Play melody",
                    "musicPlay_doc": "Plays <b>music</b> containing the musical notation defined in the <a target=\"_blank\" href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/music.html\">online documentation</a>.",
                    "musicPlay_extradoc": "If <b>music</b> is a string it is expected to be a single note such as <i>'c1:4'</i>.<br/>If <b>music</b> is specified as a list of notes (as defined in the section on the musical DSL, see the <a target=\"_blank\" href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/music.html\">online documentation</a>) then they are played one after the other to perform a melody.<br/>In both cases, the <b>duration</b> and <b>octave</b> values are reset to their defaults (4, 120) before the music (whatever it may be) is played.<br/>An optional argument to specify the output pin (<b>pin</b>) can be used to override the default of <i>microbit.pin0</i>.<br/>If <b>wait</b> is set to <i>True</i> (default value), this function is blocking.<br/>If <b>loop</b> is set to <i>True</i> (<i>False</i> by default), the tune repeats until stop is called or the blocking call is interrupted.",
                    "musicSetTempo_label": "Set tempo",
                    "musicSetTempo_doc": "Sets the approximate tempo for playback.<br/>A number of <b>ticks</b> (expressed as an integer) constitute a beat. Each beat is to be played at a certain frequency per minute (expressed as the more familiar <b>bpm</b> - beats per minute - also as an integer).",
                    "musicSetTempo_extradoc": "Suggested default values allow the following useful behaviour:<br/><i>music.set_tempo()</i> - reset the tempo to default of ticks = 4, bpm = 120<br/><i>music.set_tempo(ticks=8)</i> - change the \"definition\" of a beat<br/></i>music.set_tempo(bpm=180)</i> - just change the tempo<br/>To work out the length of a tick in milliseconds is very simple arithmetic: 60000/bpm/ticks_per_beat . For the default values that’s 60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.",
                    "musicGetTempo_label": "Get current tempo",
                    "musicGetTempo_doc": "Gets the current tempo as a tuple of integers: <i>(ticks, bpm)</i>.",
                    "musicStop_label": "Stop music",
                    "musicStop_doc": "Stops all music playback.",
                    "musicStop_extradoc": "Stops all music playback on a given <b>pin</b>, eg. <i>music.stop(pin1)</i>. If no pin is given, eg. <i>music.stop()</i>, <i>pin0</i> is assumed.",
                    "musicPitch_label": "Play pitch",
                    "musicPitch_doc": "Plays a pitch at the integer <b>frequency</b>.",
                    "musicPitch_extradoc": "The <b>frequency</b> can be played given a specified number of milliseconds. For example, if the <b>frequency</b> is set to 440 and the length (<b>duration</b>) to 1000 then we hear a standard concert A for one second.<br/>Note that you can only play one pitch on one <b>pin</b> at any one time.<br/>If <b>wait</b> is set to <i>True</i>, this function is blocking.<br/>If <b>duration</b> is negative (default value) the pitch is played continuously until either the blocking call is interrupted or, in the case of a background call, a new frequency is set or stop is called.",
                    "musicReset_label": "Reset music settings",
                    "musicReset_doc": "Resets the state of the following attributes in the following way:<br/><i>ticks = 4<br/>bpm = 120<br/>duration = 4<br/>octave = 4</i>",
                    "pin_label": "Pin",
                    "pin_doc": "The pins are your board’s way to communicate with external devices connected to it.",
                    "pin_extradoc": "There are 19 pins for your disposal, numbered 0-16 and 19-20. Pins 17 and 18 are not available. The pins are of 3 types: digital, analog or touch. Analog pins are used for numerical values between 0 and 1023. Digital pins are used for binary values (0 or 1). Touch pins are used for boolean values indicating if the pin is touched with a finger. Note that analog pins gets the functionalities of the digital pins too, and that touch pins get the functionalities of analog and digital functionalities too.<br/>For micro:bit V2, there are 2 other pins that you can use: pin_logo and pin_speaker. Also, a few more methods are available for getting the pin mode, setting the touch mode etc. See the <a href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/pin.html\" target=\"_blank\">online documentation</a> for more details.",
                    "pinDig_label": "A digital pin",
                    "pinDig_doc": "The digital pins are pins 5 to 9, 11 to 16 and 19 to 20. The example here are for pin 5, but they are valid for other pins as well. You may replace <i>pin5</i> by <i>pin6</i>, for example, in your code.",
                    "pinDigR_label": "Read digital input",
                    "pinDigR_doc": "Returns 1 if the pin is high, and 0 if it’s low.",
                    "pintDigW_label": "Write digital output",
                    "pintDigW_doc": "Sets the pin to high if <b>value</b> is 1, or to low, if it is 0.",
                    "pinAna_label": "An analog pin",
                    "pinAna_doc": "The analog pins are pins 3, 4 and 10. The example here are for pin 3, but they are valid for other pins as well. You may replace <i>pin3</i> by <i>pin4</i>, for example, in your code.",
                    "pinAnaR_label": "Read analog input",
                    "pinAnaR_doc": "Reads the voltage applied to the pin, and return it as an integer between 0 (meaning 0V) and 1023 (meaning 3.3V).",
                    "pinAnaW_label": "Write analog output",
                    "pinAnaW_doc": "Outputs a PWM signal on the pin, with the duty cycle proportional to the provided <b>value</b>. The <b>value</b> may be either an integer or a floating point number between 0 (0% duty cycle) and 1023 (100% duty).",
                    "pinAnaTMls_label": "Set millisecond period",
                    "pinAnaTMls_doc": "Sets the period of the PWM signal being output to <b>period</b> in milliseconds. The minimum valid value is 1ms.",
                    "pinAnaTMcs_label": "Set microsecond period",
                    "pinAnaTMcs_doc": "Sets the period of the PWM signal being output to <b>period</b> in microseconds. The minimum valid value is 256µs.",
                    "pinAnaRD_label": "Read digital input",
                    "pinAnaRD_doc": "Returns 1 if the pin is high, and 0 if it’s low.",
                    "pinAnaWD_label": "Write digital output",
                    "pinAnaWD_doc": "Sets the pin to high if <b>value</b> is 1, or to low, if it is 0.",
                    "pinTou_label": "A touch pin",
                    "pinTou_doc": "The touch pins are pins 0 to 2. The example here are for pin 0, but they are valid for other pins as well. You may replace <i>pin0</i> by <i>pin1</i>, for example, in your code.",
                    "pinTouR_label": "Know if the pin is touched",
                    "pinTouR_doc": "Returns <i>True</i> if the pin is being touched with a finger, otherwise return <i>False</i>.",
                    "pinTouR_extradoc": "This test is done by measuring how much resistance there is between the pin and ground. A low resistance gives a reading of True. To get a reliable reading using a finger you may need to touch the ground pin with another part of your body, for example your other hand.",
                    "pinTouRA_label": "Read analog input",
                    "pinTouRA_doc": "Reads the voltage applied to the pin, and return it as an integer between 0 (meaning 0V) and 1023 (meaning 3.3V).",
                    "pinTouWA_label": "Write analog output",
                    "pinTouWA_doc": "Outputs a PWM signal on the pin, with the duty cycle proportional to the provided <b>value</b>. The <b>value</b> may be either an integer or a floating point number between 0 (0% duty cycle) and 1023 (100% duty).",
                    "pinTouTMls_label": "Set millisecond period",
                    "pinTouTMls_doc": "Sets the period of the PWM signal being output to <b>period</b> in milliseconds. The minimum valid value is 1ms.",
                    "pinTouTMcs_label": "Set microsecond period",
                    "pinTouTMcs_doc": "Sets the period of the PWM signal being output to <b>period</b> in microseconds. The minimum valid value is 256µs.",
                    "pinTouRD_label": "Read digital input",
                    "pinTouRD_doc": "Returns 1 if the pin is high, and 0 if it’s low.",
                    "pintTouWD_label": "Write digital output",
                    "pintTouWD_doc": "Sets the pin to high if <b>value</b> is 1, or to low, if it is 0.",
                    "speech_label": "Talking and singing (speech module)",
                    "speech_doc": "<u>WARNING! This is still work in progress</u>.<br/>The quality of the speech is not great, merely \"good enough\". Given the constraints of the device you may encounter memory errors and / or unexpected extra sounds during playback. This module makes microbit talk, sing and make other speech like sounds provided that you connect a speaker to your board as shown in <a target=\"_blank\" href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html\">this page</a>. The speech synthesiser can produce around 2.5 seconds worth of sound from up to 255 characters of textual input. To access this module you need to:<br/><i>import speech</i>",
                    "speechSay_label": "Say words",
                    "speechSay_doc": "Says the English words in the string <b>words</b>. The result is semi-accurate for English. ",
                    "speechSay_extradoc": "Override the optional <b>pitch</b> (64 by default), <b>speed</b> (72 by default), <b>mouth</b> (128 by default) and <b>throat</b> (128 by default) settings to change the timbre (quality) of the voice. This is a short-hand equivalent of: <i>speech.pronounce(speech.translate(words))</i><br/>Look at the <a href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html\" target=\"_blank\">online documentation</a> for a detailed explanation on how to use these parameters.<br/>For micro:bit V2 an optional argument to specify the output <b>pin</b> can be used to override the default of <i>pin0</i>. If we do not want any sound to play out of the pins can use <i>pin=None</i>.",
                    "speechSing_label": "Sing something",
                    "speechSing_doc": "Sings the phonemes contained in the string <b>phonemes</b>.",
                    "speechSing_extradoc": "Override the optional <b>pitch</b> (64 by default), <b>speed</b> (72 by default), <b>mouth</b> (128 by default) and <b>throat</b> (128 by default) settings to change the timbre (quality) of the voice. Look at the <a href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html\" target=\"_blank\">online documentation</a> for a detailed explanation on how to use these parameters.<br/>For micro:bit V2 an optional argument to specify the output <b>pin</b> can be used to override the default of <i>pin0</i>. If we do not want any sound to play out of the pins can use <i>pin=None</i>.",
                    "speechT_label": "Translate words to phonemes",
                    "speechT_doc": "Given English words in the string <b>words</b>, returns a string containing a best guess at the appropriate phonemes to pronounce.",
                    "speechT_extradoc": "The output is generated from <a href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html#phonemes\" target=\"_blank\">this text to phoneme translation table</a>.<br/>This function should be used to generate a first approximation of phonemes that can be further hand-edited to improve accuracy, inflection and emphasis.<br/>For micro:bit V2 an optional argument to specify the output <b>pin</b> can be used to override the default of <i>pin0</i>. If we do not want any sound to play out of the pins can use <i>pin=None</i>.",
                    "speechP_label": "Pronounce phonemes",
                    "speechP_doc": "Pronounces the phonemes in the string <b>phonemes</b>. See <a href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html#phonemes\" target=\"_blank\">this</a> for details of how to use phonemes to finely control the output of the speech synthesiser.",
                    "speechP_extradoc": "Override the optional <b>pitch</b> (64 by default), <b>speed</b> (72 by default), <b>mouth</b> (128 by default) and <b>throat</b> (128 by default) settings to change the timbre (quality) of the voice. Look at the <a href=\"https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html\" target=\"_blank\">online documentation</a> for a detailed explanation on how to use these parameters.<br/>For micro:bit V2 an optional argument to specify the output <b>pin</b> can be used to override the default of <i>pin0</i>. If we do not want any sound to play out of the pins can use <i>pin=None</i>.",
                    "speaker_label": "Speaker",
                    "speaker_doc": "The micro:bit V2 has a built-in speaker located on the rear of the board.",
                    "speaker_extradoc": "By default sound output will be via the edge connector on pin 0 and the built-in speaker V2. You can connect wired headphones or a speaker to pin 0 and GND on the edge connector to hear the sounds.",
                    "speakerOn_label": "Turn the speaker on",
                    "speakerOff_label": "Turn the speaker off",
                    "speakerOff_doc": "Turns the speaker off. This does not disable sound output to an edge connector pin.",
                    "microbit_label": "Other functions",
                    "microbit_doc": "Functions of the microbit module to control the board.",
                    "setVol_label": "Set the micro:bit volume",
                    "setVol_doc": "Sets the output volume (0-255) of the micro:bit speaker and external speaker or headphones connected to the edge connector pins.",
                    "temp_label": "Get the micro:bit temperature",
                    "temp_doc": "The temperature is returned in degrees Celsius.",
                    "reset_label": "Restart the board",
                    "runned_label": "Get how long the board has been running",
                    "runned_doc": "Return the number of milliseconds since the board was switched on or restarted.",
                    "sleep_label": "Pause the micro:bit",
                    "sleep_doc": "Will pause the execution on the micro:bit for n milliseconds.",
                    "panic_label": "Enter panic mode",
                    "panic_doc": "Requires restart. Pass in an arbitrary integer <= 255 to indicate a status."
                }
            }
        }
    },
    "de": {
        "main": {
            "localeName": "Deutsch",
            "defaultProjName": "Mein Projekt",
            "strypeFileDesc": "Strype Projektdatei",
            "pythonFileDesc": "Python Codedatei",
            "frame": {
                "defaultText": {
                    "condition": "Bedingung ",
                    "list": "Liste ",
                    "identifier": "Name ",
                    "expression": "Ausdruck ",
                    "value": "Wert ",
                    "variable": "Variable ",
                    "funcCall": "Funktionsname",
                    "simpleFuncCall": "funktion()",
                    "exception": "exception ",
                    "name": "Name ",
                    "parameters": "Parameter ",
                    "module": "Modul ",
                    "modulePart": "Funktion/Klasse ",
                    "comment": "Kommentar "
                },
                "funcdef_desc": "Funktionsdefinition",
                "varassign_desc": "Zuweisung",
                "funccall_desc": "Funktionsaufruf",
                "blank_desc": "Leerzeile",
                "comment_desc": "Kommentar"
            },
            "messageBannerMessage": {
                "noUndo": "Rückgängig machen nicht verfügbar.",
                "noRedo": "Wiederholen nicht verfügbar.",
                "uploadEditorFileError": "Beim Datei-Upload ist ein Fehler aufgetreten: {errorMsg}. Dein Code ist unverändert.",
                "uploadEditorFileNotSupported": "Dieses Dateiformat ist nicht bekannt. Akzeptierte Dateitypen: {list}. Dein Code ist unverändert.",
                "forbiddenFramePaste": "Der ausgewählte Frame kann hier nicht eingefügt werden, da der Code nicht legal wäre.",
                "functionFrameCantDelete": "Der Funktionsdefinitions-Frame kann nicht gelöscht werden, solange er nicht leer ist.",
                "gdriveConnectToSaveFailed": "Die Verbindung zum Google Drive ist unterbrochen.  Automatische Speicherung ist abgeschaltet.",
                "gdriveCantCreateStrypeFolder": "Strype konnte den Standardorder \"Strype\" im Google Drive nicht anlegen.",
                "invalidPythonParseImport": "Ungültiger Python-Code importiert: {errorMsg}",
                "invalidPythonParsePaste": "Ungültiger Python-Code eingefügt: {errorMsg}",
                "wrongPythonStructCopied": "else/elif/except/finally und weiterer Code können nicht in einem Block eingefügt werden.",
                "incompatiblePythonStrypeSection": "Der Python-Code kann nicht in diesen Bereich eingefügt werden."
            },
            "buttonLabel": {
                "undo": "Rückgängig",
                "yes": "Ja",
                "no": "Nein",
                "ok": "OK",
                "cancel": "Abbrechen",
                "saveDiffLocation": "Woanders speichern",
                "overwriteProject": "Ersetzen",
                "saveProjectCopy": "Neuen Namen wählen",
                "spaceBar": "Leertaste"
            },
            "errorMessage": {
                "wrongDataFormat": "Strype kann dieses Datenformat nicht lesen",
                "stateDataIntegrity": "Die Daten sind nicht legal formatiert. Sie konnten nicht gelesen werden.",
                "dataNotObject": "Die Daten beschreiben kein Objekt",
                "stateWrongPlatform": "Die Datei wurde von eine inkompatiblen Strype-Version erzeugt.",
                "stateWrongFrameTypeName": "Ein Fehler ist aufgetreten: Frame-Typ konnte nicht gelesen werden.",
                "emptyEditableSlot": "Der Slot kann nicht leer sein",
                "errorTitle": "Fehler",
                "pastFrameErrTitle": "Laufzeitfehler bei der letzten Ausführung",
                "errorUserDefinedFuncMsg": "Benutzerdefinierte Function\nDiese Funktionsdefinition enthält Fehler",
                "errorUserDefinedVarMsg": "Benutzerdefinierte Variable\nEine Zuweisung zu dieser Variablen enthält einen Fehler",
                "EOFError": "Dieser Frame kann nicht leer sein.",
                "GDriveSaveFailed": "Strype konnte nicht auf Google Drive speichern.",
                "fileNameError": "Projekt- / Dateiname kann nur Buchstaben, Zahlen, Leerzeichen, Bindestrich oder Klammern beinhalten.",
                "gdriveConnectionSaveToLoadProjFailed": "Fehler beim Versuch, dass offene Projekt auf Google Drive zu speichern. Bitte wieder anmelden, um ein anderes Projekt zu laden.",
                "gdriveConnectionSaveToUnloadPageFailed": "Fehler beim Versuch, dass offene Projekt auf Google Drive zu speichern. Bitte wieder anmelden, um das Projekt zu speichern bevor Strype geschlossen wird.",
                "gdrivePermissionsNotMet": "Strype braucht midestens ein Zugriffsrecht um Google Drive zu benutzen.",
                "gdriveReadOnly": "Diese Google Drive-Projekt ist schreibgeschützt.",
                "gdriveWrongFile": "Bitte eine Strype-Datei auswählen (Dateiendung \".spy\").",
                "unexpectedCharsPython": "Unerwartete Zeichen"
            },
            "appMessage": {
                "editorFileUpload": "Deine Datei wird in den Editor geladen...",
                "editorFileUploadWrongVersion": "Dieser Code wurde mit einer anderen Version des Editors erstellt.\nImportieren kann womöglich Fehler beinhalten.\n\nFortfahren?",
                "importsContainer": "Importe:",
                "funcDefsContainer": "Funktionsdefinitionen:",
                "mainContainer": "Mein Code:",
                "preCompiledErrorNeedFix": "Bitte erst die existierenden Fehler beheben.",
                "noWebUSB": "Dieser Browser unterstützt keine webUSB-Verbindungen. Bitte benutze einen anderen Browser (z.B. Google Chrome).",
                "emptyCodeError": "Dieser Code darf nicht leer sein.",
                "loadToTarget": "Öffnen von:",
                "saveToTarget": "Speichen auf:",
                "targetFS": "Diesem Computer",
                "fileName": "Dateiname:",
                "gdriveFileAlreadyExists": "Es existiert schon ein Projekt mit diesem Namen.\nMöchtest Du es ersetzen?",
                "gdriveLockedFileAlreadyExists": "Dieses Projekt existiert und ist schreibgeschützt.\nEs kann nicht unter diesem Namen gespeichert werden.",
                "savedGDrive": "Gespeichert",
                "selectFolder": "Wähle einen Ordner",
                "selectStrypeFile": "Wähle ein Strype-Projekt",
                "gdriveLocation": "Ordner:",
                "gdriveAllStrypeFiles": "Alle Strype-Dateien",
                "gdriveAllPythonFiles": "Alle Python-Dateien",
                "gdriveTab": "Mein Drive",
                "editorErrors": "Fehler"
            },
            "contextMenu": {
                "ctrl": "Ctrl",
                "cut": "Ausschneiden",
                "copy": "Kopieren",
                "downloadAsImg": "Als Bilddatei speichern...",
                "duplicate": "Duplizieren",
                "paste": "Einfügen",
                "pasteAbove": "Drüber einfügen",
                "pasteBelow": "Drunter einfügen",
                "pasteBelowJointRoot": "Einfügen unter Root",
                "enable": "Aktivieren",
                "disable": "Deaktivieren",
                "undo": "Rückgängig",
                "redo": "Wiederholen",
                "delete": "Löschen",
                "deleteOuter": "Frame löschen",
                "insert": "Einfügen"
            },
            "appMenu": {
                "downloadHex": "Konvertieren: Hex-Datei",
                "downloadPython": "Konvertieren: Python-Datei",
                "loadProject": "Öffnen...",
                "loadDemoProject": "Beispiele...",
                "saveProject": "Speichern",
                "saveAsProject": "Speichern als...",
                "resetProject": "Neues Projekt",
                "resetProjectTooltip": "Neues Projekt mit Standardvorlage",
                "shareProject": "Teilen...",
                "lang": "Sprache: ",
                "homepage": "Strype Homepage",
                "version": "Version"
            },
            "autoCompletion": {
                "myFunctions": "Meine Funktionen",
                "myVariables": "Meine Variablen",
                "importedModules": "Importierte Module",
                "invalidState": "Keine Code-Komplettierung verfügbar",
                "noDocumentation": "Keine Dokumentation verfügbar"
            },
            "commandTabs": {
                "0": "Frame einfügen"
            },
            "PEA": {
                "run": "Run",
                "stop": "Stop",
                "stopping": "Stopping...",
                "runtimeErrorConsole": "Laufzeitfehler",
                "expand": "Vergrößern",
                "collapse": "Verkleinern",
                "console": "Konsole",
                "Graphics": "Graphics",
                "importTurtle": "Importiere das Modul 'turtle' um Turtle Graphics zu benutzen."
            }
        },
        "mb": {
            "buttonLabel": {
                "runOnMicrobit": "Auf micro:bit ausführen",
                "sendToMicrobit": "Zum micro:bit senden",
                "addCodeExtract": "&larr; Zum Code hinzufügen",
                "showMore": "Mehr anzeigen",
                "showLess": "Weniger anzeigen"
            },
            "action": {
                "uploadingToMicrobit": "Upload zum micro:bit ..."
            },
            "commandTabs": {
                "1": "micro:bit-Funktionen"
            },
            "messageBannerMessage": {
                "uploadSuccessMicrobit": "Upload zum micro:bit komplett.",
                "uploadFailureMicrobit": "Upload zum micro:bit abgebrochen. Fehler: \"{errorMsg}\""
            }
        }
    }
}